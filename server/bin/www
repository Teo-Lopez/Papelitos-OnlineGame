#!/usr/bin/env node

const http = require("http");

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error");
  }
});

let server = http.createServer(app);

//IMPORTANT PART
const socketIo = require("socket.io");
const io = socketIo(server); // < Interesting!
const allGames = [];

//Helper function to make teams from a list of players
const makeTeams = (userList, numberOfTeams) => {
  return userList.map((user, idx) => {
    const team = [];
    for (let i = 0; i < numberOfTeams; i++) {
      if (idx % i == 0) {
        team.push(user);
      }
    }
    return team;
  });
};

//Helper function to define current player
const findCurrentPlayer = (lastPlayer, currentGame) => {
  let found = false;
  let newActivePlayer;
  let playerIndex;
  let teamIdx = -1;
  // Itera los equipos //
  for (let key in currentGame) {
    if (found) {
      newActivePlayer = currentGame[key][playerIndex];
      console.log(newActivePlayer, currentGame[key], "53");
      break;
    }

    if (key.includes("team")) {
      teamIdx++;
      playerIndex = currentGame[key].findIndex((player) => player.name === lastPlayer);
      //Si encuentra al antiguo usuario lo marca para la siguiente vuelta

      console.log(playerIndex, "playerIndex 61");
      if (playerIndex != -1) {
        found = true;
        console.log("es ultimo?", playerIndex, currentGame[key].length - 1);
        if (playerIndex == currentGame[key].length - 1) playerIndex = 0;
      }

      //Si ha encontrado el antiguo player lo sustituye
    }
  }
  if (!newActivePlayer) newActivePlayer = currentGame.team_0[0];
  console.log(newActivePlayer, "resultado");
  return newActivePlayer;
};

io.on("connection", (socket) => {
  console.log("New client connected");

  // --------------------------- Shows List of Games ------------------//
  socket.on("getList", () => {
    console.log("sending first list");
    socket.emit(
      "matchList",
      allGames.map((game) => game.name)
    );
  });

  // --------------------------- Request new Match or Joins one ------------------//

  socket.on("newMatch", (data) => {
    //  User Data  //
    const name = data.matchId;
    const newUser = data.user;

    // Helper Function for Checking if game exist //
    const existGame = (name) => allGames.some((game) => game.name == name);
    // Helper function for checking if user is in the game //
    const isUserInGame = (name, newUser) => {
      const idx = allGames.findIndex((game) => game.name === name);

      if (idx == -1 || !newUser) throw Error("Invalid Game Idx or User");
      return allGames[idx].users.some((user) => user.name === newUser);
    };

    const example = {
      name,
      turn: 0,
      users: [{ name: newUser, id: socket.id }],
      activeWord: "",
      words: [],
      activePlayer: "",
      rooster: [],
      team_1: [],
      team_2: [],
      //team_n
      activeTurn: false,
    };

    if (!existGame(name)) {
      // Si no existe juego crea uno nuevo //
      allGames.push({
        name,
        turn: 0,
        users: [{ name: newUser, id: socket.id }],
        activeWord: "",
        words: [],
        activePlayer: "",
        rooster: [],
        activeTurn: false,
      });
    } else if (!isUserInGame(name, newUser)) {
      // Si el usuario es nuevo lo incluye //
      const gameIdx = allGames.findIndex((game) => game.name === name);
      const currentGame = allGames[gameIdx];
      currentGame.users.push({ name: newUser, id: socket.id });
      currentGame.rooster.push({ name: newUser, id: socket.id });
    }
    socket.emit(
      "matchList",
      allGames.map((game) => game.name)
    );
    socket.broadcast.emit(
      "matchList",
      allGames.map((game) => game.name)
    );
    socket.join(name);
  });

  socket.on("updateGame", ({ matchId, updatedGame }) => {
    const idx = allGames.findIndex((elm) => elm.name == updatedGame.name);
    const oldGame = allGames[idx];
    console.log(updatedGame, "info del juego de cliente");
    //Si en el update cambia el turno inicia la cuenta //
    if (oldGame.turn != updatedGame.turn) {
      updatedGame.activeTurn = true;

      oldGame.activePlayer.name
        ? (updatedGame.activePlayer = findCurrentPlayer(oldGame.activePlayer.name, updatedGame))
        : (updatedGame.activePlayer = updatedGame.users[0]);

      io.sockets.in(matchId).emit("activeGame", updatedGame);

      let timeInterval,
        timeStop = 60;

      timeInterval = setInterval(() => {
        //Si termina la cuenta indica fin de turno //
        if (timeStop <= 0) {
          clearInterval(timeInterval);
          updatedGame.activeTurn = false;
          io.sockets.in(matchId).emit("activeGame", updatedGame);
        }
        io.sockets.in(matchId).emit("timeLeft", timeStop);
        timeStop--;
      }, 100);
    }

    allGames.splice(idx, 1, updatedGame);
  });

  //Cada vez que el front requiere actualizar el objeto game.
  socket.on("getActiveGame", (roomName) => {
    const activeGame = allGames.find((elm) => elm.name === roomName);
    const numberOfUsers = activeGame.users.length; // number
    const maxUsersPerTeam = 4; // n
    const numberOfTeams = Math.ceil(numberOfUsers / maxUsersPerTeam) + 1;
    const teams = makeTeams(activeGame.users, numberOfTeams);
    teams.forEach((formedTeam, idx) => {
      const keyName = `team_${idx}`;
      activeGame[keyName] = formedTeam;
    });

    io.sockets.in(roomName).emit("activeGame", activeGame);
  });

  socket.on("postWord", ({ matchId, newWord }) => {
    const idx = allGames.findIndex((game) => game.name == matchId);
    allGames[idx].words.push(newWord);
    io.sockets.in(matchId).emit("activeGame", allGames[idx]);
  });

  //STUFF TO DO ON CONNECTION
  socket.on("disconnect", () => console.log("Client disconnected"));
});

/////////////////

server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
